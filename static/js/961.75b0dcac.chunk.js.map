{"version":3,"file":"static/js/961.75b0dcac.chunk.js","mappings":"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","sources":["components/services/api.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'bac05ff424f5bb3299d7f1868da01dae';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nasync function getTrendingMovies() {\n  const res = await axios.get(`trending/all/day?api_key=${API_KEY}`);\n  return res.data;\n}\n\nasync function getSearchMovie(search) {\n  const res = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${search}&page=1`\n  );\n  return res.data;\n}\n\nasync function getMovieById(id) {\n  const res = await axios.get(`movie/${id}?api_key=${API_KEY}&language=en-US`);\n  return res.data;\n}\n\nasync function getMovieCredits(id) {\n  const res = await axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return res.data;\n}\n\nasync function getMovieRewievs(id) {\n  const res = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return res.data;\n}\n\n\nexport {\n  getTrendingMovies,\n  getSearchMovie,\n  getMovieById,\n  getMovieCredits,\n  getMovieRewievs,\n};","// import defaultImg from '../empty.png';\nimport { useEffect, useState, Suspense, useRef } from 'react';\nimport Notiflix from 'notiflix';\n// import css from './MovieDetails.module.css';\nimport {\n  Link,\n  Outlet,\n  useParams,\n  useLocation,\n  NavLink,\n} from 'react-router-dom';\nimport { getMovieById } from 'components/services/api';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState({});\n  const [, setError] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkLocation = location.state?.from ?? '/';\n\n const detailInfo = useRef(null)\n\n  useEffect(() => {\n    const getMovieDetails = async movieId => {\n      try {\n        const responce = await getMovieById(movieId);\n        detailInfo.current = responce;\n        setMovie(detailInfo.current);\n        // setMovie(responce);\n        console.log(detailInfo.current);\n      } catch (error) {\n        setError(error);\n        Notiflix.Notify.failure(\n          `Whoops, something went wrong: ${error.message}`\n        );\n      }\n    };\n    getMovieDetails(movieId);\n  }, [movieId]);\n  console.log(movie);\n\n  return (\n    <main>\n      <Link to={backLinkLocation}>Go to back</Link>\n\n      {\n        detailInfo.current ? (\n          <>\n            <div>\n              <h2>\n                {movie.title} ({movie.release_date})\n              </h2>\n              <img\n                src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`}\n                alt={movie.title}\n              />\n              <p>User Score: {Math.round(movie.vote_average * 10)}%</p>\n              <h3>Overview</h3>\n              <p>{movie.overview}</p>\n              <h3>Genres</h3>\n              <p>\n                {movie?.genres\n                  ?.map(gen => {\n                    return gen.name;\n                  })\n                  .join(' ')}\n              </p>\n            </div>\n            <h4>Additional information</h4>\n            <ul>\n              <li>\n                <NavLink  to={`/movies/${movie.id}/cast`}>Cast</NavLink>\n              </li>\n              <li>\n                <NavLink to={`/movies/${movie.id}/reviews`}>Reviews</NavLink>\n              </li>\n            </ul>\n          </>\n        ) : (\n          <p>Not found page</p>\n        )\n        // <img className={css.defaultImg} src={defaultImg} alt=\"not found\" />\n      }\n\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["API_KEY","getTrendingMovies","axios","res","data","getSearchMovie","search","getMovieById","id","getMovieCredits","getMovieRewievs","useState","movie","setMovie","setError","movieId","useParams","backLinkLocation","useLocation","state","from","detailInfo","useRef","useEffect","getMovieDetails","responce","current","console","log","Notiflix","message","to","title","release_date","src","poster_path","alt","Math","round","vote_average","overview","genres","map","gen","name","join","Suspense","fallback"],"sourceRoot":""}